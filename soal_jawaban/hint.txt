[ shortkey ]

repositori : https://github.com/Dapunta/pemicu1
petunjuk   : https://github.com/Dapunta/pemicu1/blob/main/soal_jawaban/hint.txt

CDM & PDM (gambar)   : https://github.com/Dapunta/pemicu1/tree/main/images/diagram
query SQL (create)   : https://github.com/Dapunta/pemicu1/blob/main/sql/create_table.sql
query SQL (insert)   : https://github.com/Dapunta/pemicu1/tree/main/insert_data
query SQL (solution) : https://github.com/Dapunta/pemicu1/blob/main/sql/solution.sql
query SQL (optimal)  : https://github.com/Dapunta/pemicu1/blob/main/sql/optimal.sql
result & output      : https://github.com/Dapunta/pemicu1/tree/main/images/result


[ entity ]

# table yang menyimpan data peserta (dalam string)
# atribut verified pada tabel user bernilai 0 saat pertama kali mendaftar (belum diverifikasi). Jika berkas pada data_user sudah diverifikasi admin, barulah verified diubah menjadi 1
table : user
attribute :
  - id_user           CHAR(15)      PK
  - name              VARCHAR(255)
  - nisn              VARCHAR(10)
  - email             VARCHAR(255)
  - phone_number      VARCHAR(15)
  - password          VARCHAR(255)
  - address           VARCHAR(255)
  - registration_time DATETIME
  - verified          BOOL

# table yang menyimpan data peserta (dalam file)
table : data_user
attribute :
  - user_id_user      CHAR(15)      PK  FK
  - nilai_rapot       BLOB
  - akta_kelahiran    BLOB
  - ijazah            BLOB

# table yang menyimpan data sekolah
table : school
attribute :
  - id_school     CHAR(15)      PK
  - name          VARCHAR(255)
  - type          VARCHAR(255)

# table yang menyimpan data jalur penerimaan
table : registration_path
attribute :
  - id_registration_path  CHAR(15)      PK
  - name                  VARCHAR(255)

# table yang menyimpan data sekolah dan masing-masing jalur penerimaan
table : school_registration_path
attribute :
  - school_id_school                        CHAR(15)  PK  FK
  - registration_path_id_registration_path  CHAR(15)  PK  FK
  - capacity                                INT
  - used_capacity                           INT

# table yang menyimpan data registrasi
# karena setiap pendaftaran harus mencakup pilihan sekolah dan jalur, maka foreign key di registration menunjuk langsung ke conjunction table (school_registration_path)
# satu user bisa membuat lebih dari satu pendaftaran (misal mendaftar ke sekolah A jalur prestasi dan sekolah B jalur zonasi)
table : registration
attribute :
  - id_registration                                                   CHAR(15)  PK
  - user_id_user                                                      CHAR(15)  FK
  - school_registration_path_school_id_school                         CHAR(15)  FK
  - school_registration_path_registration_path_id_registration_path   CHAR(15)  FK
  - registration_time                                                 DATETIME
  - priority                                                          INT

# table yang menyimpan data mentah hasil seleksi (1 id_user dengan 2 id_registration bisa 'lolos' keduanya)
# kemungkinan sebuah user memiliki beberapa registration, dan tiap registration punya selection_result masing-masing
table : selection_result
attribute :
  - registration_id_registration    CHAR(15)      PK  FK
  - score                           INT
  - status                          VARCHAR(15)

# table yang menyimpan data final hasil seleksi (1 id_user hanya 1 id_registration yang bisa 'lolos' tergantung priority)
# jika seorang peserta user “lolos” di lebih dari satu pendaftaran, sistem akan memutuskan final berdasarkan priority atau kriteria lain, lalu mencatatnya di final_result
table : final_result
attribute :
  - selection_result_registration_id_registration     CHAR(15)      PK  FK
  - score                                             INT
  - status                                            VARCHAR(15)



[ relation ]

1. user memiliki relasi one-to-one terhadap data_user
2. school memiliki relasi many-to-many terhadap registration_path, maka dibuatlah conjunction table school_registration_path
3. user memiliki relasi one-to-many terhadap registration (karena 1 user dapat membuat lebih dari 1 registration atau mendaftar di lebih dari 1 sekolah)
4. registration memiliki relasi many-to-one terhadap school_registration_path (karena banyak registrasi dapat masuk ke 1 sekolah dan jurusan yang sama)
5. registration memiliki relasi one-to-one terhadap selection_result
6. selection_result memiliki relasi one-to-one terhadap final_result



[ catatan ]

- table user ke table school memiliki relasi one-to-many karena 1 user bisa melakukan pendaftaran ke sekolah yang berbeda dengan jurusan yang berbeda (maksimal 2 sekolah dan 2 jurusan)
- table school dan table registration_path memiliki relasi many-to-many, karena :
  1 jalur pendaftaran bisa saja tercantum di banyak sekolah
    misal :
      - (sekolah A) buka jalur (afirmasi)
      - (sekolah B) buka jalur (afirmasi)
      - (sekolah C) buka jalur (afirmasi)
  1 sekolah bisa mencantumkan banyak jalur pendaftaran
    misal :
      - (sekolah A) buka jalur (afirmasi)
      - (sekolah A) buka jalur (prestasi)
      - (sekolah A) buka jalur (orang tua)



[ klarifikasi ]

- secara default, atribut verified pada table user adalah 0 (karena saat daftar akun baru, file belum diverifikasi). kemudian, data_user berguna untuk menyimpan data file, jika data file terverifikasi oleh administrator, maka atribut verified pada tabel user akan dirubah menjadi 1
- table registration memiliki relasi vital dan kompleks, karena menghubungkan banyak table sekaligus. logikanya, 1 user dapat membuat 2 atau lebih registration, dan registration itu terhubung ke (school & registration_path). jadi tidak bisa hanya school atau hanya registration_path saja karena tidak mungkin memilih sekolah tanpa jurusan dan juga sebaliknya. maka dari itu, relasi dari table registration dihubungkan ke conjuction table yaitu school_registration_path



[ kemungkinan masalah ]

[ problem logic ]

1. Algoritma sorting tidak bekerja. mungkin pihak sekolah hanya melakukan verifikasi data, dan mengubah status menjadi 'lolos' tanpa memperhatikan kapasitas sekolah dan jurusan (beranggapan bahwa sorting dan perankingan final dilakukan oleh sistem database). misal ada 130 yang dianggap lolos oleh sekolah, tapi kapasitas jurusan di sekolah itu hanya ada 100.
2. Algoritma sorting kurang benar, belum mampu menghandle kasus yang bertabrakan. misal 1 anak lolos di 2 sekolah yang berbeda, pasti dia hanya memilih 1 sekolah saja, seharusnya slot di sekolah yang tidak dipilih menjadi kosong/tidak diisi (bisa dibuat dengan logika fallback)
3. Isu Transaksional dan Concurrency. Jika proses update data seleksi dilakukan secara bersamaan tanpa mekanisme kunci (locking) atau isolation level yang tepat, bisa terjadi race condition sehingga data yang tampil saat pengumuman tidak sama dengan data saat pendaftaran ulang.

[ problem teknis ]

1. Inkonsistensi Antara selection_result dan final_result
  - Desain Tabel Terpisah : Tabel selection_result dan final_result terpisah, tetapi tidak ada mekanisme transaksional yang menjamin sinkronisasi data antara keduanya.
  - Race Condition : Jika ada proses yang mengubah selection_result setelah pengumuman tetapi sebelum daftar ulang (misalnya, koreksi data), final_result tidak otomatis terupdate.
  - Bug Query : Query untuk menghasilkan final_result mungkin tidak mempertimbangkan kriteria prioritas, kapasitas jalur, atau skor dengan benar.

2. Masalah Kapasitas Jalur
  - Kolom used_capacity pada school_registration_path mungkin tidak diupdate secara atomik saat seleksi. Jika dua siswa lolos bersamaan, used_capacity bisa melebihi capacity.
  - Tidak ada pengecekan ulang kapasitas saat daftar ulang di final_result.

3. Desain Prioritas dan Seleksi
  - Kolom priority pada tabel registration tidak diintegrasikan dengan logika seleksi. Siswa dengan prioritas tinggi bisa terlempar jika kapasitas jalur penuh.
  - Tidak ada mekanisme untuk memastikan bahwa siswa hanya diterima di satu jalur/sekolah (kecuali diatur di aplikasi).



[ optimasi ]

1. Penggunaan Common Table Expression (CTE) untuk Ranking
  - Menggunakan CTE (seperti WITH RankedPriority1 dan WITH RankedPriority2).
    Proses perankingan siswa untuk masing‑masing priority dihitung sekali dan hasilnya langsung digunakan untuk INSERT ke tabel final_result.
    Mengurangi pengulangan perhitungan dan subquery yang berat, sehingga menghemat waktu proses terutama pada dataset besar.

2. Pembuatan Indeks pada Kolom-Kolom Join
  - Indeks dibuat pada kolom yang sering digunakan untuk join, misalnya pada tabel registration, selection_result, dan final_result.
    Operasi join dapat berjalan jauh lebih cepat, sehingga menurunkan beban query dan meningkatkan kecepatan eksekusi.

3. Penggunaan EXISTS/NOT EXISTS
  - Penggunaan EXISTS dan NOT EXISTS dalam kondisi update menghindari overhead dari subquery yang mengembalikan banyak baris (seperti dengan DISTINCT) dan berhenti saat menemukan kecocokan pertama.
    Sangat membantu ketika memeriksa kondisi kehadiran data (misalnya, apakah suatu user sudah ada di final_result) sehingga mengurangi waktu eksekusi.

4. Penggabungan Update Kondisi Menjadi Satu Query
  - Kedua kondisi update status di selection_result (untuk priority > X dan priority = X) digabungkan ke dalam satu pernyataan UPDATE menggunakan operator OR.
    Ini mengurangi jumlah query yang harus dieksekusi secara terpisah, sehingga mengurangi overhead transaksi dan akses berulang ke tabel yang sama.

5. Reset dan Update Kapasitas
  - Reset nilai kapasitas dan update jumlah siswa yang lolos dilakukan dengan query yang sudah dioptimasi melalui join langsung dengan subquery agregat.
    Update kapasitas kelas menjadi lebih efisien karena hanya menghitung jumlah yang tepat berdasarkan entri di final_result, mengurangi kemungkinan perhitungan ulang yang tidak perlu.

Pengaruh Keseluruhan:
  - Pada sistem dengan volume data besar, optimasi-optimasi ini dapat mengurangi waktu eksekusi secara signifikan (misalnya, dari beberapa detik menjadi ratusan milidetik) karena pengurangan perhitungan berulang, pemrosesan subquery yang lebih cepat, dan efisiensi join berkat indeks.
  - Dengan menggabungkan beberapa operasi dalam satu query, beban transaksi pada server database berkurang, sehingga memungkinkan skalabilitas dan kinerja yang lebih baik secara keseluruhan.
  - Optimasi-optimasi ini tidak hanya meningkatkan kecepatan eksekusi tetapi juga membuat kode lebih terstruktur dan mudah dipelihara.